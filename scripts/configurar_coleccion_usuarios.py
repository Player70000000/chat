# -*- coding: utf-8 -*-
"""
SCRIPT DE CONFIGURACI√ìN - COLECCI√ìN USUARIOS
CORPOTACHIRA v8.0 - Sistema de Autenticaci√≥n

Este script configura la colecci√≥n 'usuarios' en MongoDB Atlas con:
- Estructura de documentos
- √çndices √∫nicos para rendimiento y integridad
- Validaciones de esquema
"""

import sys
import os
from datetime import datetime

# Agregar path del proyecto para importar funciones
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from funciones.database_functions import get_database_connection

def configurar_coleccion_usuarios():
    """
    Configura la colecci√≥n usuarios con √≠ndices y validaciones
    """
    try:
        print("üîß Configurando colecci√≥n 'usuarios' en MongoDB Atlas...")

        db = get_database_connection()
        usuarios_collection = db['usuarios']

        # Eliminar √≠ndices existentes (excepto _id que es autom√°tico)
        print("üìã Limpiando √≠ndices anteriores...")
        try:
            usuarios_collection.drop_indexes()
        except Exception as e:
            print(f"‚ö†Ô∏è  No hay √≠ndices previos para eliminar: {e}")

        # Crear √≠ndices √∫nicos para integridad
        print("üîç Creando √≠ndices √∫nicos...")

        # √çndice √∫nico para username
        usuarios_collection.create_index("username", unique=True)
        print("‚úÖ √çndice √∫nico creado: username")

        # √çndice para c√©dula (puede repetirse entre admin manual y moderadores)
        usuarios_collection.create_index("cedula")
        print("‚úÖ √çndice creado: cedula")

        # √çndice para tipo_usuario (filtros r√°pidos)
        usuarios_collection.create_index("tipo_usuario")
        print("‚úÖ √çndice creado: tipo_usuario")

        # √çndice para personal_id (referencia a moderadores)
        usuarios_collection.create_index("personal_id", sparse=True)
        print("‚úÖ √çndice creado: personal_id")

        # √çndice para activo (filtros de usuarios activos)
        usuarios_collection.create_index("activo")
        print("‚úÖ √çndice creado: activo")

        # √çndice compuesto para consultas frecuentes
        usuarios_collection.create_index([("tipo_usuario", 1), ("activo", 1)])
        print("‚úÖ √çndice compuesto creado: tipo_usuario + activo")

        # Listar √≠ndices creados
        print("\nüìä √çndices configurados:")
        indices = usuarios_collection.list_indexes()
        for indice in indices:
            print(f"   - {indice['name']}: {indice.get('key', {})}")

        # Crear colecci√≥n de logs de seguridad si no existe
        print("\nüîê Configurando colecci√≥n 'security_logs'...")
        security_logs = db['security_logs']

        # √çndice para timestamp (limpieza autom√°tica)
        security_logs.create_index("timestamp")
        print("‚úÖ √çndice creado en security_logs: timestamp")

        # √çndice para event_type (consultas por tipo)
        security_logs.create_index("event_type")
        print("‚úÖ √çndice creado en security_logs: event_type")

        # √çndice para user_id (consultas por usuario)
        security_logs.create_index("user_id")
        print("‚úÖ √çndice creado en security_logs: user_id")

        print("\n‚úÖ ¬°Configuraci√≥n de colecciones completada exitosamente!")

        # Mostrar estad√≠sticas
        print(f"\nüìà Estad√≠sticas actuales:")
        print(f"   - Usuarios existentes: {usuarios_collection.count_documents({})}")
        print(f"   - Logs de seguridad: {security_logs.count_documents({})}")

        return True

    except Exception as e:
        print(f"‚ùå Error configurando colecci√≥n usuarios: {e}")
        return False

def validar_configuracion():
    """
    Valida que la configuraci√≥n sea correcta
    """
    try:
        print("\nüîç Validando configuraci√≥n...")

        db = get_database_connection()
        usuarios_collection = db['usuarios']

        # Verificar √≠ndices
        indices = list(usuarios_collection.list_indexes())
        indices_nombres = [indice['name'] for indice in indices]

        indices_requeridos = ['_id_', 'username_1', 'cedula_1', 'tipo_usuario_1', 'personal_id_1', 'activo_1']

        for indice_req in indices_requeridos:
            if indice_req in indices_nombres:
                print(f"‚úÖ √çndice encontrado: {indice_req}")
            else:
                print(f"‚ùå √çndice faltante: {indice_req}")
                return False

        print("‚úÖ Todos los √≠ndices requeridos est√°n configurados")

        # Probar inserci√≥n de documento de prueba
        print("\nüß™ Probando inserci√≥n de documento...")

        doc_prueba = {
            'tipo_usuario': 'test',
            'username': 'test_config_' + str(datetime.utcnow().timestamp()),
            'password': 'hash_test',
            'nombre_completo': 'Usuario de Prueba',
            'cedula': 'TEST123',
            'activo': True,
            'fecha_creacion': datetime.utcnow()
        }

        resultado = usuarios_collection.insert_one(doc_prueba)

        if resultado.inserted_id:
            print("‚úÖ Inserci√≥n de prueba exitosa")

            # Eliminar documento de prueba
            usuarios_collection.delete_one({'_id': resultado.inserted_id})
            print("‚úÖ Documento de prueba eliminado")
        else:
            print("‚ùå Error en inserci√≥n de prueba")
            return False

        print("\n‚úÖ ¬°Validaci√≥n completada exitosamente!")
        return True

    except Exception as e:
        print(f"‚ùå Error en validaci√≥n: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ CORPOTACHIRA v8.0 - Configuraci√≥n de Autenticaci√≥n")
    print("=" * 60)

    # Configurar colecci√≥n
    if configurar_coleccion_usuarios():
        print("\n‚úÖ Configuraci√≥n exitosa")

        # Validar configuraci√≥n
        if validar_configuracion():
            print("\nüéâ ¬°Sistema listo para autenticaci√≥n!")
        else:
            print("\n‚ùå Error en validaci√≥n")
            sys.exit(1)
    else:
        print("\n‚ùå Error en configuraci√≥n")
        sys.exit(1)